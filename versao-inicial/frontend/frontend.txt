Comunica√ß√£o entre componentes

Eu estou num componente que √© o header e quero que quando eu clicar num bot√£o
dentro dele, um outro componente desapare√ßa(menu), ou seja, eu quero ter acesso
a um componente(menu) a partir de outro(header), ent√£o eu tenho a necessidade
de disparar um evento num componente(header) que n√£o tem rela√ß√£o com outro
componente(menu) que eu quero que seja afetado pelo disparo do evento. Para
resolver isso precisaremos encontrar um forma de ter os dados dos componentes
de forma centralizada, ou seja, um ponto onde todos os componentes conseguem
acessar os dados ou estados uns dos outros, para isso, n√≥s vamos usar o vuex, que √© uma √°rea
de armazenamento de dados dos componentes que √© compartilhada entre eles.

Todos os componentes t√™m seu estado, e ele √© local, ou seja, acess√≠vel apenas
pelo pr√≥prio componente, e eventualmente a partir de um componente voc√™ quer
manipular o estado de outro, voc√™ pode querer que a partir de uma a√ß√£o num
componente um efeito seja gerado noutro componente.

A partir de um componente pai eu posso passar propriedades para um componente
filho e mudar eu estado, mas em cen√°rios em que n√£o h√° uma rela√ß√£o de pai para
filho isso n√£o √© poss√≠vel de forma nativa pelo vueJS.


O QUE √â O VUEX?

O Vuex √© uma biblioteca de gerenciamento de estado para aplica√ß√µes desenvolvidas
com o Vue.js, um dos frameworks JavaScript mais populares para constru√ß√£o de
interfaces de usu√°rio. Ele serve para gerenciar o estado da aplica√ß√£o de forma
centralizada, facilitando a comunica√ß√£o entre os componentes e evitando o
chamado "prop drilling" (passar dados atrav√©s de v√°rias camadas de componentes).


Em uma aplica√ß√£o Vue, os componentes geralmente possuem dados locais (o *state*)
e, quando a aplica√ß√£o cresce, torna-se mais dif√≠cil gerenciar o estado
compartilhado entre diversos componentes. O Vuex resolve isso criando um √∫nico
reposit√≥rio (ou *store*) de estado, onde todos os dados podem ser armazenados e
acessados de forma previs√≠vel e reativa.

Os principais conceitos do Vuex s√£o:

1. **State**: Onde ficam armazenados os dados da aplica√ß√£o.
2. **Getters**: Fun√ß√µes que permitem acessar e manipular o estado de maneira
mais conveniente.

3. **Mutations**: S√£o respons√°veis por alterar o estado da aplica√ß√£o. As
mutations s√£o s√≠ncronas e sempre devem ser usadas para modificar o estado.

4. **Actions**: Similar √†s mutations, mas podem ser ass√≠ncronas. Elas podem
chamar APIs ou realizar outras opera√ß√µes ass√≠ncronas antes de commitar uma
mutation.

5. **Modules**: Permite dividir o Vuex em m√≥dulos, facilitando o gerenciamento
de grandes aplica√ß√µes, mantendo cada parte do estado organizada e independente.

O Vuex √© bastante √∫til em aplica√ß√µes grandes, onde h√° a necessidade de
centralizar o gerenciamento de estado, tornando o fluxo de dados mais claro e
controlado.


O QUE √â O AXIOS?

O **Axios** √© uma biblioteca JavaScript usada para fazer requisi√ß√µes HTTP, tanto no navegador quanto no Node.js. Ele facilita a comunica√ß√£o com APIs RESTful, permitindo enviar e receber dados de forma ass√≠ncrona.

### Principais recursos do Axios:
- Suporte a **promises** e **async/await**
- Interceptores de requisi√ß√£o e resposta
- Cancelamento de requisi√ß√µes
- Convers√£o autom√°tica de resposta JSON
- Suporte a **timeout**
- Suporte a **solicita√ß√µes com autentica√ß√£o (headers personalizados, tokens, etc.)**
- Funciona tanto no navegador quanto no **Node.js**

### Exemplo de uso:
Fazendo uma requisi√ß√£o GET:
```javascript
import axios from 'axios';

axios.get('https://api.exemplo.com/dados')
  .then(response => {
    console.log(response.data);
  })
  .catch(error => {
    console.error('Erro na requisi√ß√£o:', error);
  });
```

Fazendo uma requisi√ß√£o POST:
```javascript
axios.post('https://api.exemplo.com/dados', {
  nome: 'Jo√£o',
  idade: 30
})
.then(response => {
  console.log('Dados enviados:', response.data);
})
.catch(error => {
  console.error('Erro:', error);
});
```

O QUE √â O BOOTSTRAP-VUE?

O **Bootstrap-Vue** √© um framework baseado no **Bootstrap 4** que permite usar
componentes prontos no **Vue.js**. Ele facilita a cria√ß√£o de interfaces
responsivas e estilos modernos sem precisar escrever muito CSS ou HTML
manualmente.

### **Principais recursos do Bootstrap-Vue**:
‚úÖ **Componentes prontos** ‚Äì Bot√µes, cards, modais, tabelas, alertas, etc.  
‚úÖ **Sistema de Grid** ‚Äì Layout responsivo com a estrutura do Bootstrap.  
‚úÖ **Diretivas do Vue** ‚Äì Suporte a `v-model`, eventos e bindings nativos do Vue.  
‚úÖ **Customiza√ß√£o** ‚Äì Permite temas personalizados e integra√ß√£o com SCSS.  
‚úÖ **Sem depend√™ncia de jQuery** ‚Äì Usa apenas Vue e Bootstrap CSS.  

---

### **Exemplo de Uso**
#### **Instala√ß√£o**
Se estiver usando Vue 2:
```sh
npm install bootstrap-vue
```

Se estiver usando Vue 3 (vers√£o alternativa, BootstrapVue Next):
```sh
npm install bootstrap bootstrap-vue-next
```

#### **Configura√ß√£o (Vue 2)**
No `main.js`:
```javascript
import Vue from 'vue';
import BootstrapVue from 'bootstrap-vue';
import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap-vue/dist/bootstrap-vue.css';

Vue.use(BootstrapVue);

new Vue({
  render: h => h(App),
}).$mount('#app');
```

#### **Exemplo de Componente**
```vue
<template>
  <div>
    <b-button variant="primary" @click="showAlert">Clique Aqui</b-button>
    <b-alert show variant="success" v-if="alertVisible">A√ß√£o realizada com sucesso!</b-alert>
  </div>
</template>

<script>
export default {
  data() {
    return { alertVisible: false };
  },
  methods: {
    showAlert() {
      this.alertVisible = true;
    }
  }
};
</script>
```

---

### **Situa√ß√£o Atual do Bootstrap-Vue**
O projeto **n√£o tem suporte oficial para Vue 3**, e a equipe do Bootstrap-Vue
n√£o est√° mais mantendo ativamente a biblioteca. Para Vue 3, recomenda-se usar
alternativas como:
- [BootstrapVue Next](https://github.com/bootstrap-vue/bootstrap-vue-next) (n√£o oficial, mas funcional)
- [PrimeVue](https://www.primefaces.org/primevue/) (mais completo e moderno)
- [Quasar Framework](https://quasar.dev/) (tamb√©m baseado em Vue e muito poderoso)


O QUE √â O HIGHLIGHTJS?

O **highlight.js** √© uma biblioteca de JavaScript usada para **destacar sintaxe
de c√≥digo** em p√°ginas da web. Ele detecta automaticamente a linguagem do c√≥digo
e aplica estilos coloridos para melhorar a leitura.

---

### **Principais recursos do highlight.js**:
‚úÖ **Detec√ß√£o autom√°tica da linguagem**  
‚úÖ **Suporte a mais de 180 linguagens de programa√ß√£o**  
‚úÖ **Mais de 90 temas de estiliza√ß√£o**  
‚úÖ **Funciona no navegador e no Node.js**  
‚úÖ **Leve e f√°cil de integrar**  

---

### **Exemplo de uso no navegador**
1Ô∏è‚É£ Instale via CDN (sem necessidade de configura√ß√£o):
```html
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/styles/github-dark.min.css">
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.9.0/highlight.min.js"></script>
<script>hljs.highlightAll();</script>
```

2Ô∏è‚É£ No HTML, use a tag `<pre><code>` e adicione a classe da linguagem:
```html
<pre><code class="language-javascript">
const nome = "Jo√£o";
console.log(`Ol√°, ${nome}!`);
</code></pre>
```

Isso automaticamente aplicar√° a formata√ß√£o com cores.

---

### **Exemplo com Vue.js**
Se estiver usando Vue, pode instalar via NPM:
```sh
npm install highlight.js
```
E configurar no componente:
```vue
<template>
  <pre><code ref="codeBlock" class="language-java">{{ code }}</code></pre>
</template>

<script>
import hljs from 'highlight.js';
import 'highlight.js/styles/atom-one-dark.css';

export default {
  data() {
    return { code: 'public class Hello { public static void main(String[] args) { System.out.println("Hello, World!"); } }' };
  },
  mounted() {
    hljs.highlightElement(this.$refs.codeBlock);
  }
};
</script>
```

---

### **Alternativas ao highlight.js**
- **Prism.js** ‚Äì Mais leve e personaliz√°vel.  
- **Shiki** ‚Äì Melhor para SSR e suporte a temas VS Code.  
- **CodeMirror** ‚Äì Mais usado para editores de c√≥digo interativos.  


O QUE √â O LIQUOR-TREE?

O **liquor-tree** √© uma biblioteca para Vue.js que permite criar e gerenciar
**√°rvores interativas** de forma f√°cil e eficiente. Ela √© √∫til para representar
**hierarquias de dados**, como diret√≥rios, categorias, menus e estrutura de
documentos.

---

### **Principais Recursos do liquor-tree**:
‚úÖ **Renderiza√ß√£o eficiente** ‚Äì Suporta grandes conjuntos de dados.  
‚úÖ **Eventos e interatividade** ‚Äì Permite selecionar, expandir e editar n√≥s.  
‚úÖ **Suporte a √≠cones personalizados** ‚Äì Permite personalizar os n√≥s com √≠cones
e estilos.  
‚úÖ **Modo de arrastar e soltar** ‚Äì Facilita reorganizar os n√≥s.  
‚úÖ **Funciona com Vue 2 e Vue 3** ‚Äì Adapt√°vel a projetos modernos.  

---

### **Instala√ß√£o**
Para Vue 2:
```sh
npm install liquor-tree
```

Para Vue 3:
```sh
npm install liquor-tree@next
```

---

### **Exemplo de Uso**
```vue
<template>
  <tree :data="treeData" @nodeclick="onNodeClick" />
</template>

<script>
import { Tree } from 'liquor-tree';
import 'liquor-tree/dist/liquor-tree.css';

export default {
  components: { Tree },
  data() {
    return {
      treeData: [
        { text: 'Pasta 1', children: [{ text: 'Arquivo 1.1' }, { text: 'Arquivo 1.2' }] },
        { text: 'Pasta 2', children: [{ text: 'Arquivo 2.1' }] }
      ]
    };
  },
  methods: {
    onNodeClick(node) {
      console.log('N√≥ clicado:', node.text);
    }
  }
};
</script>
```

---

### **Casos de Uso**
üìÇ Exploradores de arquivos  
üìÅ Estruturas de categorias ou taxonomias  
üìú Exibi√ß√£o de √°rvores geneal√≥gicas ou organogramas  
üóÑÔ∏è Menus aninhados  


O QUE √â O VUE-GRAVATAR?

O **vue-gravatar** √© uma biblioteca para Vue.js que permite exibir **avatares
do Gravatar** facilmente. Ele gera a URL do Gravatar a partir de um e-mail e
exibe a imagem correspondente.  

---

### **Principais Recursos do vue-gravatar**:  
‚úÖ **Gera√ß√£o autom√°tica do avatar** com base no e-mail  
‚úÖ **Personaliza√ß√£o de tamanho e estilo**  
‚úÖ **Suporte a fallback (imagem padr√£o caso n√£o exista Gravatar)**  
‚úÖ **F√°cil de usar com Vue.js**  

---

### **Instala√ß√£o**  
```sh
npm install vue-gravatar
```

Ou via CDN (Vue 2):  
```html
<script src="https://unpkg.com/vue-gravatar@latest/dist/vue-gravatar.js"></script>
```

---

### **Exemplo de Uso no Vue 2 ou Vue 3**  
```vue
<template>
  <div>
    <vue-gravatar :email="email" :size="100" default="identicon" class="rounded" />
  </div>
</template>

<script>
import VueGravatar from 'vue-gravatar';

export default {
  components: { VueGravatar },
  data() {
    return {
      email: "exemplo@email.com"
    };
  }
};
</script>
```

---

### **Par√¢metros √öteis**
- `email` ‚Üí O e-mail do usu√°rio  
- `size` ‚Üí Tamanho do avatar (padr√£o: 80px)  
- `default` ‚Üí Define uma imagem caso o usu√°rio n√£o tenha Gravatar (exemplos: `identicon`, `monsterid`, `retro`, `wavatar`)  

---

### **Alternativas ao vue-gravatar**
- **Gerar manualmente a URL do Gravatar**  
  ```html
  <img :src="`https://www.gravatar.com/avatar/${md5(email)}`" />
  ```
- **Librarias como `vue-avatar`** (suporte a mais op√ß√µes de personaliza√ß√£o)  


O **vue-mq** √© uma biblioteca para Vue.js que permite **trabalhar com media queries responsivas** de forma declarativa. Com ele, voc√™ pode definir **breakpoints** e **exibir ou ocultar componentes** com base no tamanho da tela, sem precisar escrever CSS manualmente.  

---

### **Principais Recursos do vue-mq**  
‚úÖ **Gerenciamento simples de media queries** no Vue.js  
‚úÖ **Breakpoints personalizados**  
‚úÖ **Facilidade de uso com diretivas (`v-mq`) ou computed properties**  
‚úÖ **Funciona no Vue 2 e possui alternativas para Vue 3**  

---

### **Instala√ß√£o**  
Se estiver usando Vue 2:  
```sh
npm install vue-mq
```

---

### **Configura√ß√£o no Vue 2 (`main.js`)**
```javascript
import Vue from "vue";
import VueMq from "vue-mq";

Vue.use(VueMq, {
  breakpoints: {
    mobile: 600,
    tablet: 1024,
    desktop: Infinity,
  }
});
```

---

### **Exemplo de Uso**  
Voc√™ pode **exibir componentes diferentes** dependendo do tamanho da tela:  

```vue
<template>
  <div>
    <p v-mq="['mobile', 'tablet']">Estou vis√≠vel apenas em dispositivos m√≥veis e tablets!</p>
    <p v-mq="['desktop']">Estou vis√≠vel apenas em desktops!</p>
  </div>
</template>
```

Ou usar em **JavaScript (computed property)**:  
```vue
<template>
  <h1 v-if="$mq === 'mobile'">Modo Mobile</h1>
  <h1 v-else>Modo Desktop</h1>
</template>
```

---


O QUE √â O VUE-ROUTER?

O Vue Router √© a biblioteca oficial de roteamento para o Vue.js, permitindo
criar Single Page Applications (SPAs) com navega√ß√£o din√¢mica entre p√°ginas sem
precisar recarregar a p√°gina inteira.

Principais Recursos do Vue Router
‚úÖ Defini√ß√£o de rotas declarativas
‚úÖ Suporte a par√¢metros e query strings
‚úÖ Rotas aninhadas (sub-rotas)
‚úÖ Lazy loading (carregamento din√¢mico de componentes)
‚úÖ Prote√ß√£o de rotas (navigation guards)
‚úÖ Hist√≥rico do navegador (mode: history ou hash)


O QUE √â O VUE-TOASTED?

O **vue-toasted** √© uma biblioteca para Vue.js que permite exibir
**notifica√ß√µes toast** de forma simples e personaliz√°vel. Essas notifica√ß√µes
s√£o pequenas mensagens tempor√°rias que aparecem na tela para informar o usu√°rio
sobre alguma a√ß√£o, como um sucesso, erro ou aviso.  

---

### **Principais Recursos do vue-toasted**  
‚úÖ **F√°cil de usar e configurar**  
‚úÖ **Suporte a temas e anima√ß√µes**  
‚úÖ **V√°rios tipos de notifica√ß√µes (sucesso, erro, aviso, etc.)**  
‚úÖ **Personaliza√ß√£o de tempo de exibi√ß√£o e posi√ß√£o na tela**  
‚úÖ **Funciona com Vue 2 (n√£o tem suporte oficial para Vue 3)**  

---

### **Instala√ß√£o**  
```sh
npm install vue-toasted
```

---

### **Configura√ß√£o (Vue 2)**
No `main.js`:  
```javascript
import Vue from 'vue';
import Toasted from 'vue-toasted';

Vue.use(Toasted, {
  duration: 3000, // Tempo padr√£o de exibi√ß√£o (3s)
  position: 'top-right', // Posi√ß√£o na tela
  theme: 'bubble' // Estilo
});
```

---

### **Exemplo de Uso**  
Dentro de um componente Vue:  
```vue
<template>
  <button @click="mostrarToast">Mostrar Toast</button>
</template>

<script>
export default {
  methods: {
    mostrarToast() {
      this.$toasted.show('Mensagem enviada com sucesso!', {
        type: 'success'
      });
    }
  }
};
</script>
```

### **Tipos de Notifica√ß√µes**  
```javascript
this.$toasted.success('Opera√ß√£o realizada com sucesso!');
this.$toasted.error('Erro ao processar a solicita√ß√£o!');
this.$toasted.show('Este √© um aviso!', { type: 'info' });
```

---


OQUE √â O VUE2-EDITOR?

O **vue2-editor** √© um editor de texto **WYSIWYG
(What You See Is What You Get)** para Vue.js 2, baseado no **Quill.js**.
Ele permite que os usu√°rios criem e editem conte√∫do formatado, como em editores
de texto comuns, sem precisar escrever HTML diretamente.  

---

### **Principais Recursos do vue2-editor**  
‚úÖ **Baseado no Quill.js**, um dos editores mais populares  
‚úÖ **Suporte a formata√ß√£o de texto (negrito, it√°lico, sublinhado, etc.)**  
‚úÖ **Inser√ß√£o de imagens e links**  
‚úÖ **Personaliza√ß√£o da barra de ferramentas**  
‚úÖ **F√°cil integra√ß√£o com formul√°rios Vue**  

---

### **Instala√ß√£o**  
```sh
npm install vue2-editor
```

---

### **Exemplo de Uso**  
```vue
<template>
  <div>
    <vue-editor v-model="conteudo" />
    <p>Texto digitado:</p>
    <div v-html="conteudo"></div>
  </div>
</template>

<script>
import { VueEditor } from "vue2-editor";

export default {
  components: { VueEditor },
  data() {
    return {
      conteudo: "<p>Ol√°, mundo!</p>"
    };
  }
};
</script>
```

---

### **Personaliza√ß√£o da Barra de Ferramentas**  
Voc√™ pode definir quais bot√µes aparecem no editor:  
```vue
<vue-editor v-model="conteudo" :editor-toolbar="toolbarOptions" />

data() {
  return {
    toolbarOptions: [
      ['bold', 'italic', 'underline'], // Bot√µes de formata√ß√£o
      [{ list: 'ordered' }, { list: 'bullet' }], // Listas
      ['link', 'image'] // Inser√ß√£o de links e imagens
    ]
  };
}
```

---

### **Alternativas para Vue 3**  
O `vue2-editor` **n√£o suporta Vue 3**. Para Vue 3, voc√™ pode usar:  
- **[Quill.js](https://quilljs.com/)** diretamente  
- **[vue-quill](https://vueup.github.io/vue-quill/)** (para Vue 3)  
- **[TipTap](https://tiptap.dev/)** (mais avan√ßado e moderno)  


PROPRIEDADE TRANSITION NO CSS

A propriedade transition no CSS √© usada para definir anima√ß√µes suaves entre os
valores de estilo de um elemento quando ele muda de estado. No seu caso, o
valor:

transition: visibility 0.5s, opacity 0.5s linear;
Indica que duas propriedades do elemento v√£o sofrer transi√ß√µes quando
alteradas: visibility e opacity.

visibility 0.5s: Faz com que a visibilidade do elemento mude de forma suave em
0.5 segundos.

opacity 0.5s linear: Faz com que a opacidade do elemento mude tamb√©m em 0.5
segundos, mas com um comportamento linear (isto √©, a mudan√ßa de opacidade ser√°
constante durante toda a transi√ß√£o, sem acelera√ß√µes ou desacelera√ß√µes).

Detalhes:
visibility: Determina se o elemento √© vis√≠vel ou n√£o. Quando configurado para
hidden, o elemento ainda ocupa o espa√ßo na p√°gina, mas n√£o √© vis√≠vel. A
transi√ß√£o na visibility pode ser √∫til para criar efeitos de "desaparecimento",
sem que o layout da p√°gina seja afetado.

opacity: Controla a transpar√™ncia do elemento. Vai de 0 (totalmente
transparente) a 1 (totalmente opaco). A transi√ß√£o de opacidade √© frequentemente
usada para criar efeitos de fade-in ou fade-out.

O que acontece na pr√°tica?
Quando o estado do elemento muda (por exemplo, de opacity: 0 para opacity: 1),
a transi√ß√£o acontecer√° durante 0.5 segundos.

Se a visibilidade mudar (de hidden para visible), tamb√©m ocorrer√° uma transi√ß√£o
suave de 0.5 segundos.

Note que a transi√ß√£o de visibility sozinha n√£o causa um efeito visual muito
marcante, pois a mudan√ßa de visibilidade n√£o afeta a renderiza√ß√£o imediata do
elemento (ele vai desaparecer, mas ocupar√° o mesmo espa√ßo). A transi√ß√£o de
opacity cria o efeito de suavizar a mudan√ßa de visibilidade.


VUEROUTER

No Vue Router, o **mode** define como as URLs s√£o gerenciadas na aplica√ß√£o. Ele pode ser configurado como `"hash"`, `"history"` ou `"abstract"`, e cada um funciona de maneira diferente:

### 1. **`mode: 'hash'` (Padr√£o)**
   - Utiliza um `#` na URL, como `https://example.com/#/home`.
   - F√°cil de configurar e funciona em todos os navegadores sem necessidade de configura√ß√µes extras no servidor.
   - O fragmento `#` impede que o navegador fa√ßa uma nova requisi√ß√£o ao servidor.

   **Exemplo de configura√ß√£o:**
   ```javascript
   const router = new VueRouter({
     mode: 'hash', // Padr√£o
     routes: [...]
   });
   ```

### 2. **`mode: 'history'` (Sem Hash)**
   - Usa a API **History** do navegador para modificar a URL sem recarregar a p√°gina.
   - URLs ficam limpas, como `https://example.com/home` (sem `#`).
   - Requer configura√ß√£o no servidor para redirecionar todas as requisi√ß√µes para `index.html`, evitando erros 404.

   **Exemplo de configura√ß√£o:**
   ```javascript
   const router = new VueRouter({
     mode: 'history',
     routes: [...]
   });
   ```

   **Configura√ß√£o no servidor (Exemplo para Apache)**
   Se usar `history mode`, voc√™ precisa configurar o servidor para redirecionar todas as rotas para `index.html`. Exemplo no `.htaccess`:
   ```
   <IfModule mod_rewrite.c>
     RewriteEngine On
     RewriteBase /
     RewriteRule ^index\.html$ - [L]
     RewriteCond %{REQUEST_FILENAME} !-f
     RewriteCond %{REQUEST_FILENAME} !-d
     RewriteRule . /index.html [L]
   </IfModule>
   ```

### 3. **`mode: 'abstract'` (Modo Virtual)**
   - Usado principalmente em ambientes sem um hist√≥rico real, como testes unit√°rios ou aplica√ß√µes que n√£o rodam no navegador.
   - N√£o afeta a URL vis√≠vel.

   **Exemplo de configura√ß√£o:**
   ```javascript
   const router = new VueRouter({
     mode: 'abstract',
     routes: [...]
   });
   ```

### Quando usar cada modo?
| Modo       | Quando Usar |
|------------|------------|
| `hash`     | Quando voc√™ n√£o quer configurar o servidor e precisa de compatibilidade total. |
| `history`  | Quando deseja URLs limpas e pode configurar o servidor para evitar erros 404. |
| `abstract` | Quando est√° em um ambiente sem um hist√≥rico real, como testes unit√°rios. |

O QUE √â LOCALSTORAGE?

O **localStorage** √© uma forma de armazenamento de dados no navegador web. Ele
permite que voc√™ armazene dados localmente no computador do usu√°rio de forma
persistente, ou seja, os dados ficam salvos mesmo quando a p√°gina √© recarregada
ou quando o navegador √© fechado e reaberto. 

Esse armazenamento √© feito no **lado do cliente**, ou seja, no pr√≥prio
navegador, e pode ser acessado via JavaScript.

Algumas caracter√≠sticas do **localStorage**:

1. **Persist√™ncia**: Os dados n√£o t√™m prazo de validade, ou seja, ficam
armazenados at√© que o usu√°rio os remova manualmente ou at√© que o desenvolvedor
fa√ßa alguma a√ß√£o para apag√°-los.
   
2. **Capacidade**: O localStorage oferece uma quantidade maior de espa√ßo de
armazenamento em compara√ß√£o com os cookies (geralmente 5MB ou mais, dependendo
do navegador).

3. **Chave-Valor**: Os dados s√£o armazenados no formato de chave e valor (key-value pairs), onde voc√™ armazena e recupera os dados com uma chave √∫nica. Exemplo:
   - **Armazenar**: `localStorage.setItem('nome', 'Jo√£o')`
   - **Recuperar**: `localStorage.getItem('nome')` // Retorna 'Jo√£o'

4. **Somente no navegador**: O localStorage √© exclusivo para o navegador e n√£o √©
compartilhado entre diferentes navegadores ou dispositivos.

Exemplo de uso:

```javascript
// Armazenando dados
localStorage.setItem('username', 'joao123');

// Recuperando dados
let username = localStorage.getItem('username');
console.log(username); // Output: joao123

// Removendo dados
localStorage.removeItem('username');

// Limpando todo o armazenamento local
localStorage.clear();
```

A principal vantagem do **localStorage** √© a possibilidade de manter dados
entre sess√µes de navega√ß√£o, sem precisar de uma conex√£o com o servidor para
isso. Ele √© muito utilizado para salvar configura√ß√µes do usu√°rio, carrinhos de
compras, prefer√™ncias e outras informa√ß√µes que devem persistir entre diferentes
visitas ao site.


O QUE √â O HIGHLIGHTJS

A **Highlight.js** √© uma biblioteca JavaScript que facilita a realce de sintaxe em c√≥digos de programa√ß√£o em p√°ginas web. Ela √© usada para destacar a sintaxe de c√≥digo de uma forma visualmente atraente, tornando o c√≥digo mais leg√≠vel e f√°cil de entender.

### Caracter√≠sticas principais:
1. **Suporte a v√°rias linguagens**: O Highlight.js suporta mais de 189 linguagens de programa√ß√£o, incluindo JavaScript, Python, Ruby, HTML, CSS, C++, Java, e muito mais.
2. **Autodetec√ß√£o de linguagem**: Ele pode detectar automaticamente a linguagem de programa√ß√£o utilizada no c√≥digo. Voc√™ n√£o precisa informar a linguagem explicitamente.
3. **Temas personaliz√°veis**: A biblioteca oferece diversos temas de cores para real√ßar o c√≥digo, e voc√™ pode escolher aquele que se encaixa melhor no design do seu site.
4. **F√°cil de integrar**: A integra√ß√£o √© simples, bastando incluir o arquivo CSS e o script JavaScript no seu projeto. Pode ser utilizada tanto no lado cliente (browser) quanto no servidor (Node.js).

### Como usar:

#### 1. Instalar via CDN
Voc√™ pode adicionar diretamente os arquivos CSS e JavaScript no seu HTML:

```html
<!-- Adicionar o CSS -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/default.min.css">

<!-- Adicionar o JS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/highlight.min.js"></script>

<!-- Inicializar o Highlight.js -->
<script>hljs.highlightAll();</script>
```

#### 2. Usando com c√≥digo HTML:
Dentro do seu HTML, voc√™ pode envolver o c√≥digo em uma tag `<pre><code>` e especificar a linguagem, se necess√°rio:

```html
<pre><code class="html">
  <!-- Seu c√≥digo HTML aqui -->
  <h1>Ol√°, Mundo!</h1>
</code></pre>

<pre><code class="javascript">
  // Seu c√≥digo JavaScript aqui
  console.log("Hello, World!");
</code></pre>
```

### 3. Usando a detec√ß√£o autom√°tica de linguagem (sem especificar a classe):

Se voc√™ n√£o quiser especificar a classe com a linguagem, o Highlight.js pode detectar automaticamente a linguagem com base no conte√∫do do c√≥digo:

```html
<pre><code>
  function ola() {
    console.log("Ol√°, Mundo!");
  }
</code></pre>
```

#### 4. Usando com Node.js
Se voc√™ estiver usando Node.js, pode instalar o Highlight.js via npm:

```bash
npm install highlight.js
```

E no seu c√≥digo JavaScript:

```javascript
const hljs = require('highlight.js');
const code = 'const hello = "world";';
const highlightedCode = hljs.highlightAuto(code).value;
console.log(highlightedCode);
```

### 5. Personalizando o Tema:
Existem v√°rios temas dispon√≠veis, como:

- **default**
- **monokai**
- **github**
- **atom-one-dark**

Voc√™ pode incluir o tema desejado da mesma maneira que os exemplos anteriores, trocando o link do CSS para o tema escolhido. Por exemplo:

```html
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.7.0/styles/monokai.min.css">
```

### Conclus√£o:
O **Highlight.js** √© uma ferramenta pr√°tica e simples para real√ßar a sintaxe de c√≥digo em p√°ginas web. Ele suporta uma grande variedade de linguagens de programa√ß√£o e √© f√°cil de integrar, o que o torna muito popular em blogs, sites de tutoriais e outros tipos de sites que exibem c√≥digo.